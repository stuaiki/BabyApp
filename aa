import { useEffect, useState } from "react";
import { PermissionsAndroid, Platform, Alert } from "react-native";
import { BleManager as PlxBleManager, Device } from "react-native-ble-plx"; // Alias the BleManager from react-native-ble-plx
import AsyncStorage from "@react-native-async-storage/async-storage";
import * as ExpoDevice from "expo-device";
import BleManager from "react-native-ble-manager"; // Keep the BleManager from react-native-ble-manager

const bleManager = new PlxBleManager();

const LAST_CONNECTED_DEVICE_KEY = "lastConnectedDeviceId";

interface BondedDevice {
  id: string;
  name: string;
  rssi: number;
  // Add any other properties relevant to a bonded device
}
interface BluetoothLowEnergyApi {
  requestPermissions(): Promise<boolean>;
  scanForPeripherals(): void;
  stopScanning(): void;
  allDevices: Device[];
  connectedDevice: Device | null;
  connectToDevice(device: Device): Promise<void>;
  reconnectLastDevice(): Promise<Device | null>;
  disconnectDevice(): Promise<void>;
  isConnected: boolean;
  handleConnectDevice(device: Device): void;
  setAllDevices: React.Dispatch<React.SetStateAction<Device[]>>;
  readTemperature(device: Device): Promise<number | null>;
}

function useBLE(): BluetoothLowEnergyApi {
  useEffect(() => {
    BleManager.start({ showAlert: false });
  }, []);
  const [allDevices, setAllDevices] = useState<Device[]>([]);
  const [connectedDevice, setConnectedDevice] = useState<Device | null>(null); // Track connected device

  // Store the last connected device's ID in AsyncStorage
  const storeLastConnectedDevice = async (device: Device) => {
    try {
      await AsyncStorage.setItem(LAST_CONNECTED_DEVICE_KEY, device.id);
      console.log("Stored last connected device ID:", device.id);
    } catch (error) {
      console.error("Failed to store last connected device:", error);
    }
  };

  // Retrieve the last connected device ID from AsyncStorage
  const getLastConnectedDeviceId = async (): Promise<string | null> => {
    try {
      const deviceId = await AsyncStorage.getItem(LAST_CONNECTED_DEVICE_KEY);
      return deviceId;
    } catch (error) {
      console.error("Failed to retrieve last connected device ID:", error);
      return null;
    }
  };

  // Check if a device is connected
  const isConnected = connectedDevice !== null;

  // Function to read temperature from a connected device
  const readTemperature = async (device: Device): Promise<number | null> => {
    try {
      const services = await device.services();
      const service = services.find((s) => s.uuid === "181A");

      if (!service) {
        console.error("Environmental Sensing Service not found.");
        return null;
      }

      const characteristics = await service.characteristics();
      const temperatureCharacteristic = characteristics.find(
        (c) => c.uuid === "2A6E"
      );

      if (!temperatureCharacteristic) {
        console.error("Temperature characteristic not found.");
        return null;
      }

      const characteristicValue = await temperatureCharacteristic.read();
      const base64Value = characteristicValue.value;

      if (base64Value) {
        // Convert the Base64-encoded value to a buffer
        const buffer = Buffer.from(base64Value, "base64");

        // Assuming the data is a 32-bit float in little-endian format
        const temperature = buffer.readFloatLE(0);

        // Return the temperature value
        return temperature;
      } else {
        console.error("Error: Characteristic value is null.");
        return null;
      }
    } catch (error) {
      console.error("Error reading temperature characteristic:", error);
      return null;
    }
  };

  // Request Android 31+ specific Bluetooth permissions
  const requestAndroid31Permissions = async () => {
    const bluetoothScanPermission = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
      {
        title: "Location Permission",
        message: "Bluetooth Low Energy requires Location",
        buttonPositive: "OK",
      }
    );
    const bluetoothConnectPermission = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
      {
        title: "Location Permission",
        message: "Bluetooth Low Energy requires Location",
        buttonPositive: "OK",
      }
    );
    const fineLocationPermission = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      {
        title: "Location Permission",
        message: "Bluetooth Low Energy requires Location",
        buttonPositive: "OK",
      }
    );

    return (
      bluetoothScanPermission === "granted" &&
      bluetoothConnectPermission === "granted" &&
      fineLocationPermission === "granted"
    );
  };

  // Connect to a BLE device
  const connectToDevice = async (device: Device) => {
    try {
      // Optionally, cancel connection first if connected
      if (await device.isConnected()) {
        await device.cancelConnection();
      }
      // Attempt to connect, allowing forced reconnection
      await device.connect({ autoConnect: false });
      console.log("Connected to device:", device.name);
    } catch (error) {
      console.error("Failed to connect:", error);
    }
  };

  // Disconnect from the current device
  const disconnectDevice = async () => {
    if (connectedDevice) {
      try {
        await connectedDevice.cancelConnection();
        setConnectedDevice(null); // Clear connected device state
        console.log("Disconnected from device");
      } catch (error) {
        console.error("Error disconnecting from device:", error);
      }
    }
  };

  // Request permissions for BLE
  const requestPermissions = async () => {
    if (Platform.OS === "android") {
      if ((ExpoDevice.platformApiLevel ?? -1) < 31) {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
          {
            title: "Location Permission",
            message: "Bluetooth Low Energy requires Location",
            buttonPositive: "OK",
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        const isAndroid31PermissionsGranted =
          await requestAndroid31Permissions();

        return isAndroid31PermissionsGranted;
      }
    } else {
      return true;
    }
  };

  // Reconnect to the last connected device
  const reconnectLastDevice = async (): Promise<Device | null> => {
    const lastDeviceId = await getLastConnectedDeviceId();
    if (lastDeviceId) {
      console.log(`Attempting to reconnect to last device: ${lastDeviceId}`);
      try {
        const devices = await bleManager.devices([lastDeviceId]);
        if (devices.length > 0) {
          const device = devices[0];
          await connectToDevice(device); // Reconnect to the last known device
          return device;
        }
      } catch (error) {
        console.error("Error reconnecting to last device:", error);
      }
    }
    return null;
  };

  const isDuplicateDevice = (devices: Device[], nextDevice: Device) =>
    devices.findIndex((device) => nextDevice.id === device.id) > -1;

  const isDeviceConnected = async (device: Device) => {
    try {
      const connected = await device.isConnected();
      return connected;
    } catch (error) {
      console.log("Error checking device connection:", error);
      return false;
    }
  };

  // Handle device connection via user interaction
  const handleConnectDevice = (device: Device) => {
    Alert.alert(
      "Connect to Device",
      `Do you want to connect to ${device.name || device.localName}?`,
      [
        {
          text: "Cancel",
          onPress: () => console.log("Connection canceled"),
          style: "cancel",
        },
        {
          text: "Connect",
          onPress: () => connectToDevice(device), // Proceed with connecting to the device
        },
      ],
      { cancelable: true }
    );
  };

  const isBondedDevice = async (device: Device) => {
    try {
      const bondedDevices: BondedDevice[] = await (
        BleManager as any
      ).getBondedDevices();

      const isBonded = bondedDevices.some(
        (bondedDevice: BondedDevice) => bondedDevice.id === device.id
      );

      return isBonded;
    } catch (error) {
      console.error("Error checking bond state:", error);
      return false;
    }
  };

  const scanForPeripherals = () => {
    console.log("Scanning for Bluetooth devices...");
    bleManager.startDeviceScan(null, null, async (error, device) => {
      if (error) {
        console.log("Scan error:", error);
        return;
      }

      if (device) {
        const bonded = await isBondedDevice(device);
        if (!bonded) {
          console.log("Found unbonded device:", device.name);
          setAllDevices((prevState: Device[]) => {
            if (!isDuplicateDevice(prevState, device)) {
              return [...prevState, device];
            }
            return prevState;
          });
        } else {
          console.log("Skipping bonded device:", device.name);
        }
      }
    });
  };

  // Stop scanning for BLE devices
  const stopScanning = () => {
    bleManager.stopDeviceScan();
  };

  return {
    scanForPeripherals,
    requestPermissions,
    stopScanning,
    allDevices,
    connectToDevice,
    reconnectLastDevice,
    disconnectDevice,
    isConnected, // Add this flag to track if connected
    handleConnectDevice,
    setAllDevices,
    readTemperature,
    connectedDevice,
  };
}

export default useBLE;
